"use server";

import fs from "fs/promises";
import path from "path";
import { revalidatePath } from "next/cache";

// Get the absolute path to the blog.json file
const filePath = path.join(process.cwd(), "src", "data", "task.json");

export async function GetTasks() {
  try {
    // Read the file
    const fileData = await fs.readFile(filePath, "utf8");

    // Parse the JSON data
    const taskEntries = JSON.parse(fileData);

    return taskEntries.tasks;
  } catch (error) {
    console.error("Error fetching task entries:", error);
    return [];
  }
}

export async function CreateTasks(formData) {
  const existingTasks = await GetTasks();

  const maxId = Math.max(...existingTasks.map(task => task.id), 0);
  const id = maxId + 1;
  const taskname = formData.get("taskname");
  const status = false;
  const datecreated = new Date().toISOString();
  const datelastedit = "";

  const newTask = {
    id,
    taskname,
    status,
    datecreated,
    datelastedit,
  };
  // add new task entry to existing tasks
  const newContent = [...existingTasks, newTask];

  // Create the proper JSON structure
  const jsonContent = {
    tasks: newContent,
  };

  try {
    await fs.writeFile(filePath, JSON.stringify(jsonContent, null, 2), "utf8");
    console.log("Task entry saved successfully");
    revalidatePath("/");
  } catch (error) {
    console.error("Error saving task entry:", error);
  }
}

export async function DeleteTasks(id) {
  const existingTasks = await GetTasks();

  // find task with id and filter out
  const updatedTasks = existingTasks.filter((task) => task.id !== id);
  
  const jsonContent = {
    tasks: updatedTasks,
  };

  try {
    await fs.writeFile(filePath, JSON.stringify(jsonContent, null, 2), "utf8");
    console.log("Task entry deleted successfully");
    revalidatePath("/");
  } catch (error) {
    console.error("Error deleting task from database:", error);
  }
}

export async function ToggleTasks(id) {
  const existingTasks = await GetTasks();
  // Map through tasks and toggle status for matching id
  const updatedTasks = existingTasks.map((task) => {
    if (task.id === id) {
      return {
        ...task,
        status: !task.status,
        datelastedit: new Date().toISOString(),
      };
    }
    return task
  });

  const jsonContent = {
    tasks: updatedTasks,
  };

  try {
    await fs.writeFile(filePath, JSON.stringify(jsonContent, null, 2), "utf8");
    console.log("Task status toggled successfully");
    revalidatePath("/");
  } catch (error) {
    console.error("Error toggling task status in database:", error);
  }
}

export async function EditTasks(data) {
  const existingTasks = await GetTasks();

  // Map through tasks and update taskname for matching id
  const updatedTasks = existingTasks.map((task) => {
    if (task.id === data.id) {
      return {
        ...task,
        taskname: data.taskname,
        datelastedit: new Date().toISOString(),
      };
    }
    return task;
  });

  const jsonContent = {
    tasks: updatedTasks,
  };

  try {
    await fs.writeFile(filePath, JSON.stringify(jsonContent, null, 2), "utf8");
    console.log("Task status toggled successfully");
    revalidatePath("/");
  } catch (error) {
    console.error("Error toggling task status in database:", error);
  }
}
